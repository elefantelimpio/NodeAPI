diff --git a/node_modules/node-restful/lib/model.js b/node_modules/node-restful/lib/model.js
index a1a3615..4bade20 100644
--- a/node_modules/node-restful/lib/model.js
+++ b/node_modules/node-restful/lib/model.js
@@ -1,4 +1,4 @@
-var mongoose = require('mongoose'),
+mongoose = require('mongoose'),
     _ = require('underscore'),
     Model = mongoose.Model,
     handlers = require('./handlers');
@@ -31,6 +31,7 @@ var methods = ['get', 'post', 'put', 'delete'], // All HTTP methods, PATCH not c
       'lt': query('lt'),
       'lte': query('lte'),
       'ne': query('ne'),
+      'exists': query('exists'),
       'regex': function(val, query) {
         var regParts = val.match(/^\/(.*?)\/([gim]*)$/);
         if (regParts) {
@@ -288,7 +289,6 @@ Model.register = function(app, url) {
   };
   this.send(route.split(/\./), req, res);
 }
-
 Model.prototype.send = function(routes, req, res, next) {
   var handler = this.routes;
   req.quer = this.filter(req.filters, req.body, req.query, this.Model.find({}));
@@ -301,11 +301,9 @@ Model.prototype.send = function(routes, req, res, next) {
     }
   });
   if ('all' in handler) handler = handler.all;
-
   if ('function' === typeof handler) {
     return handler.call(this, req, res, next);
   }
-
   handlers.respond(res, 404, handlers.respond404());
   handlers.last(req, res);
 }*/
@@ -473,7 +471,19 @@ function filterable(props, subfilters) {
       if (key in props) return true;
       var field = key.split('__');
       var filter_func = field[1] || 'equals';
-      return field[0] in quer.model.schema.paths && filter_func in subfilters;
+      
+      var prop = field[0];
+
+      if (prop.split('.').length) {
+        var path = prop.split('.');
+        var path = quer.model.schema.paths[path[0]];
+
+        if (path && path.instance === 'Array') {
+            prop = prop.split('.')[0];
+        }
+      }
+
+      return prop in quer.model.schema.paths && filter_func in subfilters;
     }
   }
 }
\ No newline at end of file
